"""
Moralis NFT Tool

This module provides a tool for interacting with the Moralis Web3 API for NFT metadata and multi-chain data API.

Generated by new_provider_scaffold.py on 2025-06-28
"""

import logging
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, validator

from backend.agents.tools.base_tool import AbstractApiTool
from backend.integrations.moralis_client import MoralisClient

# Configure module logger
logger = logging.getLogger(__name__)


class MoralisNftToolRequest(BaseModel):
    """Request model for MoralisNftTool."""
    # Common parameters
    method: Optional[str] = Field(
        None,
        description="Method to call (e.g., get_wallet_nfts, get_nft_metadata)",
    )

    # Moralis-specific parameters
    address: str = Field(description="Wallet or contract address")
    token_id: Optional[str] = Field(None, description="Token ID for specific NFT metadata")
    chain: Optional[str] = Field("eth", description="Blockchain network (eth, polygon, bsc, etc.)")
    format: Optional[str] = Field("decimal", description="Token ID format (decimal or hex)")
    normalizeMetadata: Optional[bool] = Field(True, description="Normalize metadata format")
    media_items: Optional[bool] = Field(False, description="Include media items in response")

    @validator("method")
    def validate_method(cls, v):
        """Validate method parameter."""
        if v is not None and v not in ['get_wallet_nfts', 'get_nft_metadata']:
            raise ValueError(f"Invalid method: {v}. Must be one of: get_wallet_nfts, get_nft_metadata")
        return v

    @validator("chain")
    def validate_chain(cls, v):
        """Validate chain parameter."""
        supported_chains = ["eth", "polygon", "bsc", "avalanche", "fantom", "cronos", "palm", "arbitrum"]
        if v not in supported_chains:
            raise ValueError(f"Unsupported chain: {v}. Must be one of: {', '.join(supported_chains)}")
        return v


class MoralisNftTool(AbstractApiTool):
    """Tool for interacting with Moralis Web3 API for NFT metadata and multi-chain data API."""

    name = "moralis_nft_tool"
    description = "Tool for retrieving NFT data and metadata from Moralis API"
    provider_id = "moralis"
    data_types = ['nft_data']
    request_model = MoralisNftToolRequest

    def __init__(self):
        """Initialize the tool."""
        super().__init__()
        self.client = MoralisClient()

    async def _execute(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Execute the tool with the given parameters."""
        # Validate parameters
        self._validate_parameters(params)

        # Determine which endpoint to call based on parameters
        if "method" in params and params["method"] is not None:
            method = params.pop("method")

            # Call the appropriate method
            if hasattr(self, method) and callable(getattr(self, method)):
                return await getattr(self, method)(params)
            else:
                raise ValueError(f"Unknown method: {method}")

        # Default logic based on presence of token_id
        if "token_id" in params and params["token_id"] is not None:
            return await self.get_nft_metadata(params)
        else:
            return await self.get_wallet_nfts(params)

    async def get_wallet_nfts(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Call get_wallet_nfts endpoint.

        Args:
            params: Request parameters

        Returns:
            Response data
        """
        address = params.get("address")

        # Build query parameters
        query_params = {}
        if "chain" in params and params["chain"] is not None:
            query_params["chain"] = params["chain"]
        if "format" in params and params["format"] is not None:
            query_params["format"] = params["format"]
        if "normalizeMetadata" in params and params["normalizeMetadata"] is not None:
            query_params["normalizeMetadata"] = str(params["normalizeMetadata"]).lower()
        if "media_items" in params and params["media_items"] is not None:
            query_params["media_items"] = str(params["media_items"]).lower()

        return await self.client.get_wallet_nfts(address, query_params)

    async def get_nft_metadata(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Call get_nft_metadata endpoint.

        Args:
            params: Request parameters

        Returns:
            Response data
        """
        address = params.get("address")
        token_id = params.get("token_id")

        if not token_id:
            raise ValueError("token_id is required for get_nft_metadata")

        # Build query parameters
        query_params = {}
        if "chain" in params and params["chain"] is not None:
            query_params["chain"] = params["chain"]
        if "format" in params and params["format"] is not None:
            query_params["format"] = params["format"]
        if "normalizeMetadata" in params and params["normalizeMetadata"] is not None:
            query_params["normalizeMetadata"] = str(params["normalizeMetadata"]).lower()
        if "media_items" in params and params["media_items"] is not None:
            query_params["media_items"] = str(params["media_items"]).lower()

        return await self.client.get_nft_metadata(address, token_id, query_params)
