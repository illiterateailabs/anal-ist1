#!/usr/bin/env python3
"""
Grafana Dashboard Generator for API Cost and Rate Limit Monitoring

This script generates Grafana dashboard JSON for monitoring external API costs,
rate limits, and usage. It supports generating:
1. An overview dashboard for all providers.
2. Detailed dashboards for individual providers.
3. Alerting rules for budget thresholds and rate limit breaches.

It integrates with Prometheus metrics exposed by the platform, specifically
`external_api_call_total`, `external_api_duration_seconds`, and
`credit_used_total`.

Usage:
    python scripts/generate_grafana_dashboard.py --output-dir grafana_dashboards
    python scripts/generate_grafana_dashboard.py --provider sim-api --output-dir grafana_dashboards
    python scripts/generate_grafana_dashboard.py --type overview --output-dir grafana_dashboards

Options:
    --output-dir DIR    Directory to save generated JSON files (default: ./grafana_dashboards)
    --provider ID       Generate dashboard only for a specific provider ID
    --type TYPE         Type of dashboard to generate (overview, detailed, all)
                        (default: all)
    --help              Show this help message and exit
"""

import argparse
import json
import os
import sys
import textwrap
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

# Add backend to sys.path to allow imports
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

import yaml
from backend.providers import get_all_providers, ProviderConfig

# Default output directory
DEFAULT_OUTPUT_DIR = Path("./grafana_dashboards")

# Grafana dashboard common properties
GRAFANA_COMMON_PROPS = {
    "id": None,  # Will be generated by Grafana on import
    "uid": None,  # Will be generated by Grafana on import
    "schemaVersion": 30,
    "version": 1,
    "time": {"from": "now-6h", "to": "now"},
    "timepicker": {
        "refresh_intervals": ["5s", "10s", "30s", "1m", "5m", "15m", "30m", "1h", "2h", "1d"],
        "time_options": ["5m", "15m", "1h", "6h", "12h", "24h", "2d", "7d", "30d"],
    },
    "timezone": "browser",
    "panels": [],
    "templating": {"list": []},
    "annotations": {"list": []},
    "links": [],
    "refresh": "5s",
    "editable": True,
    "graphTooltip": 1,
    "style": "dark",
}

# Prometheus data source UID (replace with your actual Prometheus data source UID in Grafana)
PROMETHEUS_DATASOURCE_UID = "$prometheus"


def _generate_panel(
    title: str,
    description: str,
    panel_type: str,
    grid_pos: Dict[str, int],
    targets: List[Dict[str, Any]],
    options: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]:
    """Generates a basic Grafana panel."""
    panel = {
        "id": None,  # Will be assigned dynamically
        "title": title,
        "description": description,
        "type": panel_type,
        "gridPos": grid_pos,
        "targets": targets,
        "options": options or {},
    }
    return panel


def _generate_graph_panel(
    title: str,
    description: str,
    grid_pos: Dict[str, int],
    expression: str,
    legend_format: str,
    y_axis_label: Optional[str] = None,
    unit: Optional[str] = None,
) -> Dict[str, Any]:
    """Generates a Grafana graph panel."""
    targets = [
        {
            "expr": expression,
            "legendFormat": legend_format,
            "refId": "A",
            "datasource": {"type": "prometheus", "uid": PROMETHEUS_DATASOURCE_UID},
        }
    ]
    options = {
        "tooltip": {"shared": True, "sort": 0},
        "legend": {"calcs": ["mean", "max", "current"], "displayMode": "table", "placement": "right"},
        "fieldConfig": {
            "defaults": {
                "unit": unit,
                "custom": {"drawStyle": "line", "lineInterpolation": "linear", "lineWidth": 1, "fillOpacity": 10},
                "min": 0,
                "max": None,
            },
            "overrides": [],
        },
        "axisLabels": {"left": y_axis_label},
    }
    return _generate_panel(title, description, "timeseries", grid_pos, targets, options)


def _generate_stat_panel(
    title: str,
    description: str,
    grid_pos: Dict[str, int],
    expression: str,
    unit: Optional[str] = None,
    thresholds: Optional[List[Dict[str, Any]]] = None,
) -> Dict[str, Any]:
    """Generates a Grafana Stat panel."""
    targets = [
        {
            "expr": expression,
            "legendFormat": "{{__name__}}",
            "refId": "A",
            "datasource": {"type": "prometheus", "uid": PROMETHEUS_DATASOURCE_UID},
        }
    ]
    options = {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {"calcs": ["lastNotNull"], "fields": "", "values": False},
        "textMode": "auto",
        "fieldConfig": {
            "defaults": {
                "unit": unit,
                "thresholds": {
                    "mode": "absolute",
                    "steps": thresholds or [
                        {"color": "green", "value": None},
                        {"color": "orange", "value": 0.7},
                        {"color": "red", "value": 0.9},
                    ],
                },
            },
            "overrides": [],
        },
    }
    return _generate_panel(title, description, "stat", grid_pos, targets, options)


def _generate_alerting_rule(
    rule_name: str,
    expression: str,
    threshold: float,
    for_duration: str,
    labels: Dict[str, str],
    annotations: Dict[str, str],
) -> Dict[str, Any]:
    """Generates a basic Prometheus alerting rule compatible with Grafana."""
    return {
        "alert": rule_name,
        "expr": expression,
        "for": for_duration,
        "labels": labels,
        "annotations": annotations,
    }


def generate_overview_dashboard(providers: List[ProviderConfig]) -> Dict[str, Any]:
    """Generates an overview dashboard for all API providers."""
    dashboard = {
        **GRAFANA_COMMON_PROPS,
        "title": "API Usage & Cost Overview",
        "description": "Overview of external API calls, costs, and performance across all providers.",
        "tags": ["api", "cost", "usage", "overview"],
    }
    panels = []
    alerts = []
    panel_id_counter = 1

    # Total API Calls (Rate)
    panels.append(
        _generate_graph_panel(
            title="Total API Calls Rate (All Providers)",
            description="Rate of all external API calls per second.",
            grid_pos={"x": 0, "y": 0, "w": 12, "h": 8},
            expression="sum(rate(external_api_calls_total[5m]))",
            legend_format="Total Calls",
            y_axis_label="Calls/sec",
            unit="cps",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Total API Cost (Cumulative)
    panels.append(
        _generate_graph_panel(
            title="Total API Cost (Cumulative)",
            description="Cumulative cost of all external API usage.",
            grid_pos={"x": 12, "y": 0, "w": 12, "h": 8},
            expression="sum(external_api_credit_used_total)",
            legend_format="Total Cost",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # API Call Latency (P90)
    panels.append(
        _generate_graph_panel(
            title="API Call Latency (P90)",
            description="90th percentile latency of all external API calls.",
            grid_pos={"x": 0, "y": 8, "w": 12, "h": 8},
            expression="histogram_quantile(0.90, sum(rate(external_api_duration_seconds_bucket[5m])) by (le))",
            legend_format="P90 Latency",
            y_axis_label="Seconds",
            unit="s",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # API Call Success Rate
    panels.append(
        _generate_graph_panel(
            title="API Call Success Rate",
            description="Success rate of all external API calls.",
            grid_pos={"x": 12, "y": 8, "w": 12, "h": 8},
            expression="sum(rate(external_api_calls_total{status='success'}[5m])) / sum(rate(external_api_calls_total[5m]))",
            legend_format="Success Rate",
            unit="percentunit",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Individual Provider Metrics
    y_offset = 16
    for i, provider in enumerate(providers):
        provider_id = provider.get("id")
        if not provider_id:
            continue

        # Provider API Calls Rate
        panels.append(
            _generate_graph_panel(
                title=f"{provider_id.title()} API Calls Rate",
                description=f"Rate of API calls for {provider_id}.",
                grid_pos={"x": 0, "y": y_offset, "w": 12, "h": 7},
                expression=f"rate(external_api_calls_total{{provider='{provider_id}'}}[5m])",
                legend_format="{{endpoint}}",
                y_axis_label="Calls/sec",
                unit="cps",
            )
        )
        panels[-1]["id"] = panel_id_counter
        panel_id_counter += 1

        # Provider API Cost
        panels.append(
            _generate_graph_panel(
                title=f"{provider_id.title()} API Cost",
                description=f"Cumulative cost for {provider_id} API usage.",
                grid_pos={"x": 12, "y": y_offset, "w": 12, "h": 7},
                expression=f"external_api_credit_used_total{{provider='{provider_id}'}}",
                legend_format="{{credit_type}}",
                y_axis_label="USD",
                unit="currencyUSD",
            )
        )
        panels[-1]["id"] = panel_id_counter
        panel_id_counter += 1

        # Add alerting rule example for provider cost
        alerts.append(
            _generate_alerting_rule(
                rule_name=f"{provider_id.title()}HighCost",
                expression=f"sum(external_api_credit_used_total{{provider='{provider_id}'}}) > 100",
                threshold=100.0,
                for_duration="5m",
                labels={"severity": "warning", "provider": provider_id},
                annotations={
                    "summary": f"High cost detected for {provider_id}",
                    "description": f"Cumulative cost for {provider_id} has exceeded $100 in the last 5 minutes.",
                },
            )
        )

        y_offset += 7

    dashboard["panels"] = panels
    dashboard["annotations"]["list"].append({
        "builtIn": 1,
        "datasource": {"type": "grafana", "uid": "-- Grafana --"},
        "enable": True,
        "hide": True,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard",
    })
    # Grafana alerts are typically managed outside the dashboard JSON or via specific panel configs
    # For a comprehensive solution, these alerts would be in a separate Prometheus/Alertmanager config
    # or defined within Grafana's alerting UI. This is a conceptual representation.
    dashboard["__alerting_rules__"] = alerts # Custom field for conceptual representation

    return dashboard


def generate_detailed_provider_dashboard(provider: ProviderConfig) -> Dict[str, Any]:
    """Generates a detailed dashboard for a specific API provider."""
    provider_id = provider.get("id")
    if not provider_id:
        raise ValueError("Provider ID is required for detailed dashboard.")

    dashboard = {
        **GRAFANA_COMMON_PROPS,
        "title": f"{provider_id.title()} API Detailed Monitoring",
        "description": f"Detailed monitoring for {provider_id} API calls, costs, and performance.",
        "tags": ["api", "cost", "usage", "detailed", provider_id],
    }
    panels = []
    alerts = []
    panel_id_counter = 1

    # Variables for dynamic filtering
    dashboard["templating"]["list"].append({
        "current": {"selected": True, "text": "All", "value": "$__all"},
        "hide": 0,
        "label": "Endpoint",
        "name": "endpoint",
        "options": [],
        "query": f"label_values(external_api_calls_total{{provider='{provider_id}'}}, endpoint)",
        "refresh": 1,
        "regex": "",
        "type": "query",
    })
    dashboard["templating"]["list"].append({
        "current": {"selected": True, "text": "All", "value": "$__all"},
        "hide": 0,
        "label": "Status",
        "name": "status",
        "options": [],
        "query": f"label_values(external_api_calls_total{{provider='{provider_id}'}}, status)",
        "refresh": 1,
        "regex": "",
        "type": "query",
    })

    # API Call Stats
    panels.append(
        _generate_stat_panel(
            title="Total API Calls",
            description="Total number of API calls made.",
            grid_pos={"x": 0, "y": 0, "w": 6, "h": 4},
            expression=f"sum(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint', status=~'$status'}})",
            unit="none",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Total API Cost",
            description="Total cost of API usage.",
            grid_pos={"x": 6, "y": 0, "w": 6, "h": 4},
            expression=f"sum(external_api_credit_used_total{{provider='{provider_id}', endpoint=~'$endpoint'}})",
            unit="currencyUSD",
            thresholds=[
                {"color": "green", "value": None},
                {"color": "orange", "value": 50},
                {"color": "red", "value": 100},
            ],
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Average Latency",
            description="Average API call latency.",
            grid_pos={"x": 12, "y": 0, "w": 6, "h": 4},
            expression=f"avg(rate(external_api_duration_seconds_sum{{provider='{provider_id}', endpoint=~'$endpoint'}}[5m])) / avg(rate(external_api_duration_seconds_count{{provider='{provider_id}', endpoint=~'$endpoint'}}[5m]))",
            unit="s",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Error Rate",
            description="Percentage of API calls that resulted in errors.",
            grid_pos={"x": 18, "y": 0, "w": 6, "h": 4},
            expression=f"sum(rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint', status='error'}}[5m])) / sum(rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint'}}[5m])) * 100",
            unit="percent",
            thresholds=[
                {"color": "green", "value": None},
                {"color": "orange", "value": 5},
                {"color": "red", "value": 10},
            ],
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # API Call Rate by Endpoint
    panels.append(
        _generate_graph_panel(
            title="API Call Rate by Endpoint",
            description="Rate of API calls per endpoint.",
            grid_pos={"x": 0, "y": 4, "w": 12, "h": 8},
            expression=f"rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint', status=~'$status'}}[5m])",
            legend_format="{{endpoint}}",
            y_axis_label="Calls/sec",
            unit="cps",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # API Cost by Credit Type
    panels.append(
        _generate_graph_panel(
            title="API Cost by Credit Type",
            description="Cost breakdown by credit type.",
            grid_pos={"x": 12, "y": 4, "w": 12, "h": 8},
            expression=f"external_api_credit_used_total{{provider='{provider_id}', endpoint=~'$endpoint'}}",
            legend_format="{{credit_type}}",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # API Latency by Endpoint (P90)
    panels.append(
        _generate_graph_panel(
            title="API Latency by Endpoint (P90)",
            description="90th percentile latency by endpoint.",
            grid_pos={"x": 0, "y": 12, "w": 12, "h": 8},
            expression=f"histogram_quantile(0.90, sum(rate(external_api_duration_seconds_bucket{{provider='{provider_id}', endpoint=~'$endpoint'}}[5m])) by (le, endpoint))",
            legend_format="{{endpoint}}",
            y_axis_label="Seconds",
            unit="s",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Error Rate by Endpoint
    panels.append(
        _generate_graph_panel(
            title="Error Rate by Endpoint",
            description="Percentage of API calls resulting in errors by endpoint.",
            grid_pos={"x": 12, "y": 12, "w": 12, "h": 8},
            expression=f"sum(rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint', status='error'}}[5m])) by (endpoint) / sum(rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint'}}[5m])) by (endpoint) * 100",
            legend_format="{{endpoint}}",
            y_axis_label="Error Rate (%)",
            unit="percent",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Rate Limit Utilization (if applicable)
    panels.append(
        _generate_graph_panel(
            title="Rate Limit Utilization",
            description="Percentage of rate limit utilized.",
            grid_pos={"x": 0, "y": 20, "w": 12, "h": 8},
            expression=f"rate(external_api_calls_total{{provider='{provider_id}', endpoint=~'$endpoint'}}[1m]) / scalar(avg_over_time(external_api_rate_limit{{provider='{provider_id}'}}[1h]) > 0 or vector(60))",
            legend_format="{{endpoint}}",
            y_axis_label="Utilization (%)",
            unit="percentunit",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Daily Budget Utilization
    panels.append(
        _generate_graph_panel(
            title="Daily Budget Utilization",
            description="Percentage of daily budget utilized.",
            grid_pos={"x": 12, "y": 20, "w": 12, "h": 8},
            expression=f"sum(increase(external_api_credit_used_total{{provider='{provider_id}'}}[24h])) / scalar(avg_over_time(external_api_daily_budget{{provider='{provider_id}'}}[24h]) > 0 or vector(100))",
            legend_format="Budget Utilization",
            y_axis_label="Utilization (%)",
            unit="percentunit",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Add alerting rules
    alerts.append(
        _generate_alerting_rule(
            rule_name=f"{provider_id.title()}DailyBudgetWarning",
            expression=f"sum(increase(external_api_credit_used_total{{provider='{provider_id}'}}[24h])) / scalar(avg_over_time(external_api_daily_budget{{provider='{provider_id}'}}[24h]) > 0 or vector(100)) > 0.8",
            threshold=0.8,
            for_duration="5m",
            labels={"severity": "warning", "provider": provider_id},
            annotations={
                "summary": f"Daily budget warning for {provider_id}",
                "description": f"Daily budget utilization for {provider_id} has exceeded 80%.",
            },
        )
    )

    alerts.append(
        _generate_alerting_rule(
            rule_name=f"{provider_id.title()}RateLimitWarning",
            expression=f"rate(external_api_calls_total{{provider='{provider_id}'}}[1m]) / scalar(avg_over_time(external_api_rate_limit{{provider='{provider_id}'}}[1h]) > 0 or vector(60)) > 0.8",
            threshold=0.8,
            for_duration="1m",
            labels={"severity": "warning", "provider": provider_id},
            annotations={
                "summary": f"Rate limit warning for {provider_id}",
                "description": f"Rate limit utilization for {provider_id} has exceeded 80%.",
            },
        )
    )

    alerts.append(
        _generate_alerting_rule(
            rule_name=f"{provider_id.title()}HighErrorRate",
            expression=f"sum(rate(external_api_calls_total{{provider='{provider_id}', status='error'}}[5m])) / sum(rate(external_api_calls_total{{provider='{provider_id}'}}[5m])) > 0.1",
            threshold=0.1,
            for_duration="5m",
            labels={"severity": "warning", "provider": provider_id},
            annotations={
                "summary": f"High error rate for {provider_id}",
                "description": f"Error rate for {provider_id} has exceeded 10%.",
            },
        )
    )

    dashboard["panels"] = panels
    dashboard["annotations"]["list"].append({
        "builtIn": 1,
        "datasource": {"type": "grafana", "uid": "-- Grafana --"},
        "enable": True,
        "hide": True,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard",
    })
    dashboard["__alerting_rules__"] = alerts

    return dashboard


def generate_rate_limit_dashboard(providers: List[ProviderConfig]) -> Dict[str, Any]:
    """Generates a dashboard focused on rate limit monitoring."""
    dashboard = {
        **GRAFANA_COMMON_PROPS,
        "title": "API Rate Limit Monitoring",
        "description": "Detailed monitoring of API rate limits and usage patterns.",
        "tags": ["api", "rate-limit", "usage"],
    }
    panels = []
    alerts = []
    panel_id_counter = 1

    # Variables for dynamic filtering
    dashboard["templating"]["list"].append({
        "current": {"selected": True, "text": "All", "value": "$__all"},
        "hide": 0,
        "label": "Provider",
        "name": "provider",
        "options": [],
        "query": "label_values(external_api_calls_total, provider)",
        "refresh": 1,
        "regex": "",
        "type": "query",
    })

    # Rate Limit Overview
    panels.append(
        _generate_graph_panel(
            title="Rate Limit Utilization by Provider",
            description="Percentage of rate limit utilized by each provider.",
            grid_pos={"x": 0, "y": 0, "w": 24, "h": 8},
            expression="rate(external_api_calls_total{provider=~'$provider'}[1m]) / scalar(avg_over_time(external_api_rate_limit{provider=~'$provider'}[1h]) > 0 or vector(60))",
            legend_format="{{provider}}",
            y_axis_label="Utilization (%)",
            unit="percentunit",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Rate Limit Stats
    panels.append(
        _generate_stat_panel(
            title="Providers Near Rate Limit",
            description="Number of providers approaching their rate limit.",
            grid_pos={"x": 0, "y": 8, "w": 8, "h": 4},
            expression="count(rate(external_api_calls_total[1m]) / scalar(avg_over_time(external_api_rate_limit[1h]) > 0 or vector(60)) > 0.7)",
            unit="none",
            thresholds=[
                {"color": "green", "value": None},
                {"color": "orange", "value": 1},
                {"color": "red", "value": 3},
            ],
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Highest Utilization",
            description="Provider with highest rate limit utilization.",
            grid_pos={"x": 8, "y": 8, "w": 8, "h": 4},
            expression="max(rate(external_api_calls_total[1m]) / scalar(avg_over_time(external_api_rate_limit[1h]) > 0 or vector(60)) * 100)",
            unit="percent",
            thresholds=[
                {"color": "green", "value": None},
                {"color": "orange", "value": 70},
                {"color": "red", "value": 90},
            ],
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Total Rate Limited Calls",
            description="Total number of rate limited API calls.",
            grid_pos={"x": 16, "y": 8, "w": 8, "h": 4},
            expression="sum(external_api_calls_total{status='rate_limited'})",
            unit="none",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Rate Limited Calls by Provider
    panels.append(
        _generate_graph_panel(
            title="Rate Limited Calls by Provider",
            description="Number of rate limited calls by provider.",
            grid_pos={"x": 0, "y": 12, "w": 12, "h": 8},
            expression="sum(external_api_calls_total{status='rate_limited', provider=~'$provider'}) by (provider)",
            legend_format="{{provider}}",
            y_axis_label="Calls",
            unit="none",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Rate Limited Calls by Endpoint
    panels.append(
        _generate_graph_panel(
            title="Rate Limited Calls by Endpoint",
            description="Number of rate limited calls by endpoint.",
            grid_pos={"x": 12, "y": 12, "w": 12, "h": 8},
            expression="sum(external_api_calls_total{status='rate_limited', provider=~'$provider'}) by (endpoint)",
            legend_format="{{endpoint}}",
            y_axis_label="Calls",
            unit="none",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Hourly Call Pattern
    panels.append(
        _generate_graph_panel(
            title="Hourly Call Pattern",
            description="API call pattern by hour of day.",
            grid_pos={"x": 0, "y": 20, "w": 24, "h": 8},
            expression="sum(rate(external_api_calls_total{provider=~'$provider'}[5m])) by (hour_of_day)",
            legend_format="Hour {{hour_of_day}}",
            y_axis_label="Calls/sec",
            unit="cps",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Add alerting rules
    for provider in providers:
        provider_id = provider.get("id")
        if not provider_id:
            continue

        alerts.append(
            _generate_alerting_rule(
                rule_name=f"{provider_id.title()}RateLimitApproaching",
                expression=f"rate(external_api_calls_total{{provider='{provider_id}'}}[1m]) / scalar(avg_over_time(external_api_rate_limit{{provider='{provider_id}'}}[1h]) > 0 or vector(60)) > 0.8",
                threshold=0.8,
                for_duration="1m",
                labels={"severity": "warning", "provider": provider_id},
                annotations={
                    "summary": f"Rate limit approaching for {provider_id}",
                    "description": f"Rate limit utilization for {provider_id} has exceeded 80%.",
                },
            )
        )

    dashboard["panels"] = panels
    dashboard["annotations"]["list"].append({
        "builtIn": 1,
        "datasource": {"type": "grafana", "uid": "-- Grafana --"},
        "enable": True,
        "hide": True,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard",
    })
    dashboard["__alerting_rules__"] = alerts

    return dashboard


def generate_cost_dashboard(providers: List[ProviderConfig]) -> Dict[str, Any]:
    """Generates a dashboard focused on cost monitoring."""
    dashboard = {
        **GRAFANA_COMMON_PROPS,
        "title": "API Cost Monitoring",
        "description": "Detailed monitoring of API costs and budget utilization.",
        "tags": ["api", "cost", "budget"],
    }
    panels = []
    alerts = []
    panel_id_counter = 1

    # Variables for dynamic filtering
    dashboard["templating"]["list"].append({
        "current": {"selected": True, "text": "All", "value": "$__all"},
        "hide": 0,
        "label": "Provider",
        "name": "provider",
        "options": [],
        "query": "label_values(external_api_credit_used_total, provider)",
        "refresh": 1,
        "regex": "",
        "type": "query",
    })

    dashboard["templating"]["list"].append({
        "current": {"selected": True, "text": "All", "value": "$__all"},
        "hide": 0,
        "label": "Credit Type",
        "name": "credit_type",
        "options": [],
        "query": "label_values(external_api_credit_used_total, credit_type)",
        "refresh": 1,
        "regex": "",
        "type": "query",
    })

    # Cost Overview
    panels.append(
        _generate_graph_panel(
            title="Total Cost by Provider",
            description="Cumulative cost by provider.",
            grid_pos={"x": 0, "y": 0, "w": 24, "h": 8},
            expression="sum(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'}) by (provider)",
            legend_format="{{provider}}",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Cost Stats
    panels.append(
        _generate_stat_panel(
            title="Total Cost",
            description="Total cost across all providers.",
            grid_pos={"x": 0, "y": 8, "w": 8, "h": 4},
            expression="sum(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'})",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Daily Cost",
            description="Cost in the last 24 hours.",
            grid_pos={"x": 8, "y": 8, "w": 8, "h": 4},
            expression="sum(increase(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'}[24h]))",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    panels.append(
        _generate_stat_panel(
            title="Budget Utilization",
            description="Percentage of monthly budget utilized.",
            grid_pos={"x": 16, "y": 8, "w": 8, "h": 4},
            expression="sum(external_api_credit_used_total{provider=~'$provider'}) / scalar(avg_over_time(external_api_monthly_budget[30d]) > 0 or vector(1000))",
            unit="percentunit",
            thresholds=[
                {"color": "green", "value": None},
                {"color": "orange", "value": 0.7},
                {"color": "red", "value": 0.9},
            ],
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Cost by Credit Type
    panels.append(
        _generate_graph_panel(
            title="Cost by Credit Type",
            description="Breakdown of costs by credit type.",
            grid_pos={"x": 0, "y": 12, "w": 12, "h": 8},
            expression="sum(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'}) by (credit_type)",
            legend_format="{{credit_type}}",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Cost by Endpoint
    panels.append(
        _generate_graph_panel(
            title="Cost by Endpoint",
            description="Breakdown of costs by endpoint.",
            grid_pos={"x": 12, "y": 12, "w": 12, "h": 8},
            expression="sum(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'}) by (endpoint)",
            legend_format="{{endpoint}}",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Daily Cost Trend
    panels.append(
        _generate_graph_panel(
            title="Daily Cost Trend",
            description="Cost trend by day.",
            grid_pos={"x": 0, "y": 20, "w": 24, "h": 8},
            expression="sum(increase(external_api_credit_used_total{provider=~'$provider', credit_type=~'$credit_type'}[24h])) by (day_of_week)",
            legend_format="Day {{day_of_week}}",
            y_axis_label="USD",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Cost Efficiency
    panels.append(
        _generate_graph_panel(
            title="Cost Efficiency",
            description="Cost per API call.",
            grid_pos={"x": 0, "y": 28, "w": 24, "h": 8},
            expression="sum(external_api_credit_used_total{provider=~'$provider'}) by (provider) / sum(external_api_calls_total{provider=~'$provider'}) by (provider)",
            legend_format="{{provider}}",
            y_axis_label="USD per call",
            unit="currencyUSD",
        )
    )
    panels[-1]["id"] = panel_id_counter
    panel_id_counter += 1

    # Add alerting rules
    for provider in providers:
        provider_id = provider.get("id")
        if not provider_id:
            continue

        alerts.append(
            _generate_alerting_rule(
                rule_name=f"{provider_id.title()}BudgetWarning",
                expression=f"sum(external_api_credit_used_total{{provider='{provider_id}'}}) / scalar(avg_over_time(external_api_monthly_budget{{provider='{provider_id}'}}[30d]) > 0 or vector(1000)) > 0.8",
                threshold=0.8,
                for_duration="5m",
                labels={"severity": "warning", "provider": provider_id},
                annotations={
                    "summary": f"Budget warning for {provider_id}",
                    "description": f"Monthly budget utilization for {provider_id} has exceeded 80%.",
                },
            )
        )

        alerts.append(
            _generate_alerting_rule(
                rule_name=f"{provider_id.title()}CostSpike",
                expression=f"increase(external_api_credit_used_total{{provider='{provider_id}'}}[1h]) > 10",
                threshold=10,
                for_duration="5m",
                labels={"severity": "warning", "provider": provider_id},
                annotations={
                    "summary": f"Cost spike detected for {provider_id}",
                    "description": f"Cost for {provider_id} has increased by more than $10 in the last hour.",
                },
            )
        )

    dashboard["panels"] = panels
    dashboard["annotations"]["list"].append({
        "builtIn": 1,
        "datasource": {"type": "grafana", "uid": "-- Grafana --"},
        "enable": True,
        "hide": True,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard",
    })
    dashboard["__alerting_rules__"] = alerts

    return dashboard


def save_dashboard_to_file(dashboard: Dict[str, Any], output_path: Path) -> None:
    """Saves a dashboard to a JSON file."""
    with open(output_path, "w") as f:
        json.dump(dashboard, f, indent=2)
    print(f"Dashboard saved to: {output_path}")


def parse_args():
    """Parses command line arguments."""
    parser = argparse.ArgumentParser(
        description="Generate Grafana dashboards for API cost and rate limit monitoring.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent("""
        Examples:
            python scripts/generate_grafana_dashboard.py --output-dir grafana_dashboards
            python scripts/generate_grafana_dashboard.py --provider sim-api --output-dir grafana_dashboards
            python scripts/generate_grafana_dashboard.py --type overview --output-dir grafana_dashboards
        """),
    )
    parser.add_argument(
        "--output-dir",
        type=str,
        default=str(DEFAULT_OUTPUT_DIR),
        help=f"Directory to save generated JSON files (default: {DEFAULT_OUTPUT_DIR})",
    )
    parser.add_argument(
        "--provider",
        type=str,
        help="Generate dashboard only for a specific provider ID",
    )
    parser.add_argument(
        "--type",
        type=str,
        choices=["overview", "detailed", "rate-limit", "cost", "all"],
        default="all",
        help="Type of dashboard to generate (default: all)",
    )
    return parser.parse_args()


def main():
    """Main entry point."""
    args = parse_args()

    # Create output directory if it doesn't exist
    output_dir = Path(args.output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    # Load providers
    try:
        providers = get_all_providers()
        if not providers:
            print("No providers found in registry.")
            return 1

        # Filter providers if specified
        if args.provider:
            providers = [p for p in providers if p.get("id") == args.provider]
            if not providers:
                print(f"Provider '{args.provider}' not found in registry.")
                return 1
    except Exception as e:
        print(f"Error loading providers: {e}")
        return 1

    # Generate dashboards based on type
    dashboards_generated = 0

    if args.type in ["overview", "all"]:
        try:
            overview_dashboard = generate_overview_dashboard(providers)
            overview_path = output_dir / "api_overview_dashboard.json"
            save_dashboard_to_file(overview_dashboard, overview_path)
            dashboards_generated += 1
        except Exception as e:
            print(f"Error generating overview dashboard: {e}")

    if args.type in ["rate-limit", "all"]:
        try:
            rate_limit_dashboard = generate_rate_limit_dashboard(providers)
            rate_limit_path = output_dir / "api_rate_limit_dashboard.json"
            save_dashboard_to_file(rate_limit_dashboard, rate_limit_path)
            dashboards_generated += 1
        except Exception as e:
            print(f"Error generating rate limit dashboard: {e}")

    if args.type in ["cost", "all"]:
        try:
            cost_dashboard = generate_cost_dashboard(providers)
            cost_path = output_dir / "api_cost_dashboard.json"
            save_dashboard_to_file(cost_dashboard, cost_path)
            dashboards_generated += 1
        except Exception as e:
            print(f"Error generating cost dashboard: {e}")

    if args.type in ["detailed", "all"]:
        for provider in providers:
            try:
                provider_id = provider.get("id")
                if not provider_id:
                    continue

                provider_dashboard = generate_detailed_provider_dashboard(provider)
                provider_path = output_dir / f"api_{provider_id}_dashboard.json"
                save_dashboard_to_file(provider_dashboard, provider_path)
                dashboards_generated += 1
            except Exception as e:
                print(f"Error generating dashboard for provider {provider.get('id')}: {e}")

    print(f"Generated {dashboards_generated} dashboards.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
