"""
Integration tests for covalent provider.

Generated by new_provider_scaffold.py on 2025-06-28
"""

import os
import pytest
from unittest.mock import AsyncMock, MagicMock, patch

from backend.integrations.covalent_client import CovalentClient
from backend.agents.tools.covalent_balances_tool import CovalentBalancesTool
from backend.core.neo4j_loader import Neo4jLoader


# Skip these tests if no API key is available
pytestmark = pytest.mark.skipif(
    not os.environ.get("COVALENT_API_KEY"),
    reason="covalent API key not available",
)


@pytest.fixture
def mock_neo4j():
    """Mock Neo4j loader."""
    loader = AsyncMock(spec=Neo4jLoader)
    loader._execute_query = AsyncMock()
    loader._process_result_stats = MagicMock(return_value=MagicMock(
        nodes_created=0,
        relationships_created=0,
        properties_set=0,
        labels_added=0,
    ))
    return loader


@pytest.mark.integration
@pytest.mark.asyncio
async def test_client_real_connection():
    """Test connecting to the real API (requires API key)."""
    # This test will be skipped if no API key is available
    client = CovalentClient()
    
    # Test a simple API call - Ethereum mainnet vitalik.eth balances
    try:
        result = await client.get_token_balances(
            chain_id="1", 
            address="0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
            params={"quote-currency": "USD", "no-nft-fetch": "true"}
        )
        assert result is not None
        assert "data" in result
        assert "items" in result["data"]
    except Exception as e:
        pytest.fail(f"API call failed: {e}")


@pytest.mark.integration
@pytest.mark.asyncio 
async def test_balances_tool_execution():
    """Test the Covalent balances tool."""
    tool = CovalentBalancesTool()
    
    # Test with vitalik.eth on Ethereum
    params = {
        "chain_id": "1",
        "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
        "quote_currency": "USD"
    }
    
    try:
        result = await tool._execute(params)
        assert result is not None
        assert "data" in result
    except Exception as e:
        pytest.fail(f"Tool execution failed: {e}")


@pytest.mark.integration
@pytest.mark.asyncio
async def test_neo4j_integration(mock_neo4j):
    """Test integration with Neo4j."""
    client = CovalentClient()
    
    # Mock API response
    with patch.object(client, 'get_token_balances', return_value={
        "data": {
            "items": [
                {
                    "contract_address": "0xa0b86a33e6ba82ee79b0c9e4e5adb39f8b76c0b7",
                    "contract_name": "USDC",
                    "balance": "1000000000",
                    "quote": 1000.0,
                    "contract_decimals": 6
                }
            ]
        }
    }):
        # Get data from API
        data = await client.get_token_balances("1", "0xtest")
        
        # Process data with Neo4j
        for item in data.get("data", {}).get("items", []):
            query = """
            MERGE (token:Token {address: $address})
            SET token.name = $name, token.decimals = $decimals
            MERGE (addr:Address {address: $wallet})
            MERGE (addr)-[b:HOLDS]->(token)
            SET b.balance = $balance, b.quote = $quote
            RETURN token, addr, b
            """
            params = {
                "address": item["contract_address"],
                "name": item["contract_name"],
                "decimals": item["contract_decimals"],
                "wallet": "0xtest",
                "balance": item["balance"], 
                "quote": item["quote"]
            }
            
            await mock_neo4j._execute_query(query, params)
        
        # Verify Neo4j was called
        assert mock_neo4j._execute_query.called


@pytest.mark.integration
@pytest.mark.asyncio
async def test_provider_error_handling():
    """Test error handling for API calls."""
    client = CovalentClient()
    
    # Test with invalid chain ID
    with pytest.raises(Exception):
        await client.get_token_balances(
            chain_id="999999",  # Invalid chain
            address="0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
        )


@pytest.mark.unit
@pytest.mark.asyncio
async def test_tool_validation():
    """Test tool parameter validation."""
    tool = CovalentBalancesTool()
    
    # Test invalid chain_id
    params = {
        "chain_id": "999999",  # Invalid
        "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
    }
    
    with pytest.raises(ValueError):
        await tool._execute(params)
    
    # Test missing required field
    params = {
        "chain_id": "1"
        # Missing address
    }
    
    with pytest.raises(Exception):
        await tool._execute(params)
