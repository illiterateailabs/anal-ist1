name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - name: Lint with Ruff
        run: |
          ruff check --output-format=github backend tests

  type-check:
    name: Type Check with mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - name: Type check with mypy
        env:
          PYTHONPATH: .
        run: |
          mypy backend

  test:
    name: Test with pytest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      neo4j:
        image: neo4j:5.15.0
        env:
          NEO4J_AUTH: neo4j/analyst123
          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget -q -O - http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - name: Test with pytest
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: analyst123
          NEO4J_DATABASE: neo4j
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'dummy_key_for_tests' }}
          E2B_API_KEY: ${{ secrets.E2B_API_KEY || 'dummy_key_for_tests' }}
          E2B_TEMPLATE_ID: ${{ secrets.E2B_TEMPLATE_ID || 'python3-default' }}
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_secret_key
          JWT_ALGORITHM: HS256
          PYTHONPATH: .
        run: |
          pytest --cov=backend --cov-report=xml -v
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    name: Verify Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: analyst-agent-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: analyst-agent-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
